<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rum</name>
    </assembly>
    <members>
        <member name="M:Rum.App_Start.NinjectWebCommon.Start">
            <summary>
            Starts the application
            </summary>
        </member>
        <member name="M:Rum.App_Start.NinjectWebCommon.Stop">
            <summary>
            Stops the application.
            </summary>
        </member>
        <member name="M:Rum.App_Start.NinjectWebCommon.CreateKernel">
            <summary>
            Creates the kernel that will manage your application.
            </summary>
            <returns>The created kernel.</returns>
        </member>
        <member name="M:Rum.App_Start.NinjectWebCommon.RegisterServices(Ninject.IKernel)">
            <summary>
            Load your modules or register your services here!
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:Rum.Areas.Admin.Controllers.AdminBaseController">
            <summary>
            This controller will work as a base controller for the admin section of the application
            </summary>
        </member>
        <member name="M:Rum.Controllers.BaseController.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            This will check validation error on action executing
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            This will be used to check user authorization
            </summary>
            <param name="filter_context"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            This will be used to handle exceptions 
            </summary>
            <param name="filter_context"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.LogExceptionToDatabase(System.Exception)">
            <summary>
            log exception to database
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Controllers.BaseController.LogExceptionToFile(System.String,System.String)">
            <summary>
            Log exception to text file on server
            </summary>
            <param name="ex"></param>
            <param name="ex_message"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.CreateCustomAuthorisationCookie(System.String,System.Boolean,System.String)">
            <summary>
            used to create user authorization cookie after login
            </summary>
            <param name="user_name"></param>
            <param name="is_persistent"></param>
            <param name="custom_data"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.UpdateCustomAuthorisationCookie(System.String)">
            <summary>
            used to update user authorization cookie after login
            </summary>
            <param name="user_name"></param>
            <param name="is_persistent"></param>
            <param name="custom_data"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.RenderRazorViewToString(System.String,System.Object)">
            <summary>
            this will be used to render a view as a string 
            </summary>
            <param name="view_name"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Controllers.BaseController.SignOut">
            <summary>
            Will be used to logout from the application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Controllers.BaseController.SetActionName(System.String,System.String)">
            <summary>
            This will be used to set action name
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Rum.Controllers.BaseController.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            This will dispose the context after request execution
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="P:Rum.Controllers.BaseController.LOGGEDIN_USER">
            <summary>
            Contains Information for Logged In User
            </summary>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.AdminBaseController.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            This will be used to chek admin user authorization
            </summary>
            <param name="filter_context"></param>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.AdminBaseController.CreateCustomAuthorisationCookie(System.String,System.Boolean,System.String)">
            <summary>
            this will be used to create admin user authentication cookie after login
            </summary>
            <param name="user_name"></param>
            <param name="is_persistent"></param>
            <param name="custom_data"></param>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.AdminBaseController.SignOut">
            <summary>
            this will be used to log out from the admin section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.AdminBaseController.SetActionName(System.String,System.String)">
            <summary>
            This will be used to set action name
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.Index">
            <summary>
            Admin : Login Page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.Login(Rum.BLL.Models.AdminLoginModel)">
            <summary>
            This will handle user login request
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.Dashboard">
            <summary>
            Dashboard Page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.ForgetPassword">
            <summary>
            ForgetPassword View
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.ChangePassword">
            <summary>
            This will return change Admin password view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.ChangePassword(Rum.BLL.Models.ChangePassword)">
            <summary>
            Ajax method to change Admin password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.AdminProfile">
            <summary>
            Display admin saved details
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.AddAdminDetails(Rum.BLL.Models.AdminProfile)">
            <summary>
            Update the admin details
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.UpdateCookiedetails">
            <summary>
            Update the cookie (admin details) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.ManageUsers">
            <summary>
            Dispaly all users as grid view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.GetUsersPagingList(Rum.BLL.Models.PagingModel)">
            <summary>
            Arrange the page order
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.AddUser">
            <summary>
            Add new user page
            </summary>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.EditUser(System.Int32)">
            <summary>
            Edit page to update the user information
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.UpdateUserDetails(Rum.BLL.Models.RumAdminUserModel)">
            <summary>
            Ajax method to update the user details
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.DeleteUser(System.Int32)">
            <summary>
            Ajaxa method to delete the existin user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.UploadFile">
            <summary>
            temporarily Saved Upload Image From Uploader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.DeleteUploadFile">
            <summary>
            temporarily Saved Upload Image From Uploader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.CropImage(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             Temporarily Saved Croped Image
            </summary>
            <param name="imagePath"></param>
            <param name="cropPointX"></param>
            <param name="cropPointY"></param>
            <param name="imageCropWidth"></param>
            <param name="imageCropHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.CreateCelebrity">
            <summary>
            Create new Celebrity Page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.AddTemplate">
            <summary>
            This Will be used to get Template List
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.Admin.Controllers.HomeController.CMSManager">
            <summary>
            This Will be used to get Template List
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.API.ChatController.SaveChat(Rum.BLL.Models.WebApi.AddChatModel)">
            <summary>
            Save user Chat
            </summary>
        </member>
        <member name="M:Rum.Areas.API.ChatController.GetOwnerChatslist(System.Int32,System.Int32)">
            <summary>
            Get messages for property
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.AddProperty">
            <summary>
            Add New property
            </summary>
            <param name="data">Request should be form data request</param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.UpdateProperty">
            <summary>
            Update property
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.DeleteProperty(System.Int32,System.Int32)">
            <summary>
            Delete property
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.DeletePropertyImages(System.Int32)">
            <summary>
            Delete property Image by image ID
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.GetPropertyList(Rum.BLL.Models.WebApi.PropertyListingModel)">
            <summary>
            Get property List By user ID And Location
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.AddLikedProperty(System.Int32,System.Int32)">
            <summary>
            Add User Liked properties
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.RemoveLikedProperty(System.Int32,System.Int32)">
            <summary>
            Remove User Liked properties
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.AddDislikedProperty(System.Int32,System.Int32)">
            <summary>
            Add User Disliked properties
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.AddFavProperty(System.Int32)">
            <summary>
            Add User Fav properties
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.GetPropertyByLocationOrUserID(Rum.BLL.Models.WebApi.GetPropertyByLocationOrUserID)">
            <summary>
            Get property List By user ID And Location
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.GetPropertyByUserFilter">
            <summary>
            Get property List By user Filters for Swipe
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.GetUserLikedPropertyList(System.Int32)">
            <summary>
            Get user Liked property List 
            </summary>
        </member>
        <member name="M:Rum.Areas.API.PropertyController.GetPropertyDetails(System.Int32,System.Int32)">
            <summary>
            Get property Details
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.login(Rum.BLL.Models.LoginModel)">
            <summary>
            API method for login
            </summary>
            <param name="model">Username/Email and Password</param>
            <returns> If Valid -> Authentication token And user details</returns>
        </member>
        <member name="M:Rum.Areas.API.AccountController.CreateNewSession(System.Int32)">
            <summary>
            create new session when user trying to login
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.API.AccountController.DeleteUserAccount(Rum.BLL.Models.DeleteUserAccount)">
            <summary>
            Delete user account
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.API.AccountController.AddFeedback(Rum.BLL.Models.AddFeedbackModel)">
            <summary>
            Add user feedback
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Rum.Areas.API.AccountController.SignUp(Rum.BLL.Models.RumApiSignUpModel)">
            <summary>
            API method for Sign Up
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.Logout">
            <summary>
            API Method To Logout to user
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.GetUserProfile(System.Int32)">
            <summary>
            Get User Profile Details
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.UpdateUserLocation(Rum.BLL.Models.UpdateUserLocationModel)">
            <summary>
            Update User Location
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.UpdateUserSettings(Rum.BLL.Models.UserSettingModel)">
            <summary>
            Update User Settings
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.GetUserSettings">
            <summary>
            Get User Settings
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.EditUserProfile(Rum.BLL.Models.EditUserProfileModel)">
            <summary>
            Edit User Profile
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.UpdateProfilePics">
            <summary>
             Save Quickblox Details
            </summary>
        </member>
        <member name="M:Rum.Areas.API.AccountController.SaveQBDetails(Rum.BLL.Models.WebApi.AddQuickBloxModel)">
            <summary>
            Save Quickblox Details
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:Rum.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,Rum.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:Rum.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.KeyValuePairModelDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.EnumValueDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ModelDescriptions.SimpleTypeModelDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rum.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:Rum.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:Rum.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rum.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,Rum.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,Rum.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(Rum.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:Rum.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Rum.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:Rum.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="T:Rum.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:Rum.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:Rum.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleKey.#ctor(Rum.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Rum.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Rum.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,Rum.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Rum.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:Rum.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rum.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:Rum.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:Rum.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:Rum.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:Rum.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rum.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:Rum.Attributes.NoCacheAttribute">
            <summary>
            This will be used to set No Cache For Controller Actions
            </summary>
        </member>
        <member name="T:Rum.Attributes.IgnoreModelErrorsAttribute">
            <summary>
            This will be used to skip model validations
            </summary>
        </member>
        <member name="T:Rum.Attributes.ValidateModel">
            <summary>
            validates the incomming model
            </summary>
        </member>
        <member name="T:Rum.Attributes.HandelExceptionFilter">
            <summary>
            raised whenever any exception is encounteted in the application
            </summary>
        </member>
        <member name="T:Rum.Attributes.CheckAuthorizationFilter">
            <summary>
            Checks if the incomming user is authorized at the time any function in about to execute 
            </summary>
        </member>
        <member name="T:Rum.Attributes.SkipAuthorization">
            <summary>
            methods marked with this will not be checked for authorization
            </summary>
        </member>
        <member name="T:Rum.Attributes.SkipAuthentication">
            <summary>
            methods marked with this will not be checked for authentication
            </summary>
        </member>
        <member name="T:Rum.Controllers.HomeController">
            <summary>
            Home Controller 
            Created On: 10/04/2015
            </summary>
        </member>
        <member name="M:Rum.Controllers.HomeController.Index">
            <summary>
            Index View 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rum.SchedulerJobs.JobScheduler.SentQueuedNotificationScheduler">
            <summary>
            Send push notifications 
            </summary>
        </member>
        <member name="M:Rum.SchedulerJobs.JobScheduler.DeleteCGITopImagesScheduler">
            <summary>
            Delete CGI share images 
            </summary>
        </member>
        <member name="M:Rum.SchedulerJobs.JobScheduler.DeleteExpiredPromotionsScheduler">
            <summary>
            Delete Exipred Promotions 
            </summary>
        </member>
    </members>
</doc>
